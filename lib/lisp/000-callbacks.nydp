(chapter-start 'nydp/active-record "Tools for managing persistent data")

;; generate the correct hook name for the given event for the given type
(def event-hook-name (event type)
  (returnlet name (sym "~|event|-~|type|")
    (if (no:dox-lookup name)
      (dox-add-doc name 'hook '("this hook is run ~event for instances of ~type") (list type)))))

;; run hooks for the given event and thing
(def run-event-hooks (event thing) (run-hooks (event-hook-name event (type-of thing)) thing))

;; Declares code to run after a thing of type 'type is created. Use this to trigger
;; other updates depending on the thing being created.
;; 'type is a symbol, for example one of '(contact course course_series course_work organisation)
;; 'body is either:
;;   - a single symbol naming an existing function to use as the hook
;;   - one or more expressions to evaluate ; the value you pass for 'type is locally-bound within these expressions.
(mac after-create (type . body) `(on ,(event-hook-name 'after-create type) (,type) ,@body))

;; Declares code to run after a thing of type 'type is saved. Use this to trigger
;; other updates depending on the thing being saved.
;; 'type is a symbol, for example one of '(contact course course_series course_work organisation)
;; 'body is either:
;;   - a single symbol naming an existing function to use as the hook
;;   - one or more expressions to evaluate ; the value you pass for 'type is locally-bound within these expressions.
(mac after-save (type . body) `(on ,(event-hook-name 'after-save type) (,type) ,@body))

;; Declares code to run after a thing of type 'type is touched. Use this to trigger
;; other updates depending on the thing being touched.
;; 'type is a symbol, for example one of '(contact course course_series course_work organisation)
;; 'body is either:
;;   - a single symbol naming an existing function to use as the hook
;;   - one or more expressions to evaluate ; the value you pass for 'type is locally-bound within these expressions.
(mac after-touch (type . body) `(on ,(event-hook-name 'after-touch type) (,type) ,@body))

(dox-add-doc 'update 'def '("make changes to the persistent state of an object, eg (update thing { name new-name })")
             '(thing attrs) nil '(nydp/active-record))
